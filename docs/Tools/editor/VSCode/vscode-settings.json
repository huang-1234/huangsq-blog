{

  
  

  // 控制已更新文件的自动保存。可在[此处](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) 阅读有关自动保存的详细信息。
  //  - off: 永不自动保存更新后的文件。
  //  - afterDelay: 当文件修改后的时间超过 `files.autoSaveDelay` 中配置的值时自动进行保存。
  //  - onFocusChange: 编辑器失去焦点时自动保存更新后的文件。
  //  - onWindowChange: 窗口失去焦点时自动保存更新后的文件。
  "files.autoSave": "off",

  // 以像素为单位控制字号。
  "editor.fontSize": 14,

  // 控制字体系列。
  "editor.fontFamily": "Consolas, 'Courier New', monospace",

  // 一个制表符等于的空格数。在 `editor.detectIndentation` 启用时，根据文件内容，该设置可能会被覆盖。
  "editor.tabSize": 4,

  // 控制编辑器在空白字符上显示符号的方式。
  //  - none
  //  - boundary: 除了单个空格，在空白字符上显示符号。
  //  - all
  "editor.renderWhitespace": "none",

  // 控制光标样式。
  "editor.cursorStyle": "line",

  // 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突。[阅读详细信息](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)。
  //  - ctrlCmd: 映射为 "Ctrl" (Windows 和 Linux) 或 "Command" (macOS)
  //  - alt: 映射为 "Alt" (Windows 和 Linux) 或 "Option" (macOS)
  "editor.multiCursorModifier": "alt",

  // 按 `Tab` 键时插入空格。该设置在 `editor.detectIndentation` 启用时根据文件内容可能会被覆盖。
  "editor.insertSpaces": true,

  // 控制折行的方式。
  //  - off: 永不换行。
  //  - on: 将在视区宽度处换行。
  //  - wordWrapColumn: 在 `editor.wordWrapColumn` 处折行。
  //  - bounded: 在视区宽度和 `editor.wordWrapColumn` 中的较小值处折行。
  "editor.wordWrap": "off",

  // 配置 glob 模式以在搜索中排除文件和文件夹。例如，文件资源管理器根据此设置决定文件或文件夹的显示和隐藏。
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // 配置语言的文件关联 (如: `"*.extension": "html"`)。这些关联的优先级高于已安装语言的默认关联。
  "files.associations": {}

}
,
{


  // 控制在差异编辑器中是否把前导空格或尾随空格的改动显示为差异。
  "diffEditor.ignoreTrimWhitespace": true,

  // 控制差异编辑器是否为添加/删除的更改显示 +/- 指示符号。
  "diffEditor.renderIndicators": true,

  // 控制差异编辑器的显示方式是并排还是内联。
  "diffEditor.renderSideBySide": true,

  // 控制是否应在遇到提交字符时接受建议。例如，在 JavaScript 中，半角分号 (`;`) 可以为提交字符，能够在接受建议的同时键入该字符。
  "editor.acceptSuggestionOnCommitCharacter": true,

  // 控制除了 `Tab` 键以外， `Enter` 键是否同样可以接受建议。这能减少“插入新行”和“接受建议”命令之间的歧义。
  //  - on
  //  - smart: 仅当建议包含文本改动时才可使用 `Enter` 键进行接受。
  //  - off
  "editor.acceptSuggestionOnEnter": "on",

  // 控制编辑器是否应运行在对屏幕阅读器进行优化的模式。
  //  - auto: 编辑器将使用平台 API 以检测是否附加了屏幕阅读器。
  //  - on: 编辑器将对屏幕阅读器的使用进行永久优化。
  //  - off: 编辑器将不再对屏幕阅读器的使用进行优化。
  "editor.accessibilitySupport": "auto",

  // 控制编辑器是否在左括号后自动插入右括号。
  "editor.autoClosingBrackets": true,

  // 控制编辑器是否在用户键入、粘贴或移动行时自动调整缩进。必须安装包含此语言缩进规则的扩展。
  "editor.autoIndent": true,

  // 在保存时运行的代码操作类型。
  "editor.codeActionsOnSave": {},

  // 控制在保存文件时进行的代码操作的超时时间 (毫秒)。
  "editor.codeActionsOnSaveTimeout": 750,

  // 控制是否在编辑器中显示 CodeLens
  "editor.codeLens": true,

  // 控制编辑器是否显示内联颜色修饰器和颜色选取器。
  "editor.colorDecorators": true,

  // 控制光标的动画样式。
  "editor.cursorBlinking": "blink",

  // 控制光标样式。
  "editor.cursorStyle": "line",

  // 当 `editor.cursorStyle` 设置为 `line` 时，控制光标的宽度。
  "editor.cursorWidth": 0,

  // 控制是否在打开文件时，基于文件内容自动检测 `editor.tabSize#` 和 `#editor.insertSpaces`。
  "editor.detectIndentation": true,

  // 控制在编辑器中是否允许通过拖放来移动选中内容。
  "editor.dragAndDrop": true,

  // 控制在没有选择内容时进行复制是否复制当前行。
  "editor.emptySelectionClipboard": true,

  // 控制对选中文本还是编辑器中的整个文件执行查找操作。
  "editor.find.autoFindInSelection": false,

  // 控制是否将编辑器选中内容作为搜索词填入到查找小组件中。
  "editor.find.seedSearchStringFromSelection": true,

  // 控制编辑器是否启用代码折叠功能
  "editor.folding": true,

  // 控制计算折叠范围的策略。`auto` 将使用语言特定的折叠策略 (若可用)。`indentation` 将使用基于缩进的折叠策略。
  "editor.foldingStrategy": "auto",

  // 控制字体系列。
  "editor.fontFamily": "Consolas, 'Courier New', monospace",

  // 启用或禁用字体连字。
  "editor.fontLigatures": false,

  // 以像素为单位控制字号。
  "editor.fontSize": 14,

  // 控制字体粗细。
  "editor.fontWeight": "normal",

  // 控制编辑器是否自动格式化粘贴的内容。格式化程序必须可用，并且能针对文档中的某一范围进行格式化。
  "editor.formatOnPaste": false,

  // 保存时设置文件的格式。格式化程序必须可用，不能自动保存文件，并且不能关闭编辑器。
  "editor.formatOnSave": false,

  // 控制在保存文件时进行格式化的超时时间 (毫秒)。
  "editor.formatOnSaveTimeout": 750,

  // 控制编辑器在键入一行后是否自动格式化该行。
  "editor.formatOnType": false,

  // 控制编辑器是否应呈现垂直字形边距。字形边距最常用于调试。
  "editor.glyphMargin": true,

  // 控制是否在概览标尺中隐藏光标。
  "editor.hideCursorInOverviewRuler": false,

  // 控制是否突出显示编辑器中活动的缩进参考线。
  "editor.highlightActiveIndentGuide": true,

  // 控制显示悬停提示前的等待时间 (毫秒)。
  "editor.hover.delay": 300,

  // 控制是否显示悬停提示。
  "editor.hover.enabled": true,

  // 控制当鼠标移动到悬停提示上时，其是否保持可见。
  "editor.hover.sticky": true,

  // 按 `Tab` 键时插入空格。该设置在 `editor.detectIndentation` 启用时根据文件内容可能会被覆盖。
  "editor.insertSpaces": true,

  // 对大型文件进行特殊处理，禁用某些内存密集型功能。
  "editor.largeFileOptimizations": true,

  // 以像素为单位控制字符间距。
  "editor.letterSpacing": 0,

  // 在编辑器中启用代码操作小灯泡提示。
  "editor.lightbulb.enabled": true,

  // 控制行高。为 0 时则通过字体大小自动计算。
  "editor.lineHeight": 0,

  // 控制行号的显示。
  //  - off: 不显示行号。
  //  - on: 将行号显示为绝对行数。
  //  - relative: 将行号显示为与光标相隔的行数。
  //  - interval: 每 10 行显示一次行号。
  "editor.lineNumbers": "on",

  // 控制是否在编辑器中检测链接并使其可被点击。
  "editor.links": true,

  // 当选择其中一项时，将突出显示匹配的括号。
  "editor.matchBrackets": true,

  // 控制是否显示小地图。
  "editor.minimap.enabled": true,

  // 限制小地图的宽度，控制其最多显示的列数。
  "editor.minimap.maxColumn": 120,

  // 渲染每行的实际字符，而不是色块。
  "editor.minimap.renderCharacters": true,

  // 控制是否自动隐藏小地图滑块。
  "editor.minimap.showSlider": "mouseover",

  // 控制在哪一侧显示小地图。
  "editor.minimap.side": "right",

  // 对鼠标滚轮滚动事件的 `deltaX` 和 `deltaY` 乘上的系数。
  "editor.mouseWheelScrollSensitivity": 1,

  // 按住 `Ctrl` 键并滚动鼠标滚轮时对编辑器字体大小进行缩放。
  "editor.mouseWheelZoom": false,

  // 当多个光标重叠时进行合并。
  "editor.multiCursorMergeOverlapping": true,

  // 在通过鼠标添加多个光标时使用的修改键。“转到定义”和“打开链接”功能所需的鼠标动作将会相应调整，不与多光标修改键冲突。[阅读详细信息](https://code.visualstudio.com/docs/editor/codebasics#_multicursor-modifier)。
  //  - ctrlCmd: 映射为 "Ctrl" (Windows 和 Linux) 或 "Command" (macOS)
  //  - alt: 映射为 "Alt" (Windows 和 Linux) 或 "Option" (macOS)
  "editor.multiCursorModifier": "alt",

  // 控制编辑器是否突出显示语义符号次数。
  "editor.occurrencesHighlight": true,

  // 控制是否在概览标尺周围绘制边框。
  "editor.overviewRulerBorder": true,

  // 控制概览标尺中同一位置可显示的提示数量。
  "editor.overviewRulerLanes": 3,

  // 在输入时显示含有参数文档和类型信息的小面板。
  "editor.parameterHints": true,

  // 控制是否在键入时自动显示建议。
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },

  // 控制显示快速建议前的等待时间 (毫秒)。
  "editor.quickSuggestionsDelay": 10,

  // 控制编辑器是否显示控制字符。
  "editor.renderControlCharacters": false,

  // 控制编辑器是否显示缩进参考线。
  "editor.renderIndentGuides": true,

  // 控制编辑器的当前行进行高亮显示的方式。
  //  - none
  //  - gutter
  //  - line
  //  - all: 同时突出显示导航线和当前行。
  "editor.renderLineHighlight": "line",

  // 控制编辑器在空白字符上显示符号的方式。
  //  - none
  //  - boundary: 除了单个空格，在空白字符上显示符号。
  //  - all
  "editor.renderWhitespace": "none",

  // 控制选区是否有圆角。
  "editor.roundedSelection": true,

  // 在一定数量的等宽字符后显示垂直标尺。输入多个值，显示多个标尺。若数组为空，则不绘制标尺。
  "editor.rulers": [],

  // 控制编辑器水平滚动时可以超过范围的字符数。
  "editor.scrollBeyondLastColumn": 5,

  // 控制编辑器是否可以滚动到最后一行之后。
  "editor.scrollBeyondLastLine": true,

  // 控制编辑器是否应突出显示选项的近似匹配
  "editor.selectionHighlight": true,

  // 控制是否自动隐藏导航线上的折叠控件。
  "editor.showFoldingControls": "mouseover",

  // 控制是否淡化未使用的代码。
  "editor.showUnused": true,

  // 控制编辑器是否在滚动时使用动画。
  "editor.smoothScrolling": false,

  // 控制代码片段是否与其他建议一起显示及其排列的位置。
  //  - top: 在其他建议上方显示代码片段建议。
  //  - bottom: 在其他建议下方显示代码片段建议。
  //  - inline: 在其他建议中穿插显示代码片段建议。
  //  - none: 不显示代码片段建议。
  "editor.snippetSuggestions": "inline",

  // 在速览编辑器中，即使双击其中的内容或者按 `Esc` 键，也保持其打开状态。
  "editor.stablePeek": false,

  // 控制对建议的筛选和排序是否考虑小的拼写错误。
  "editor.suggest.filterGraceful": true,

  // 控制在活动代码片段内是否禁用快速建议。
  "editor.suggest.snippetsPreventQuickSuggestions": true,

  // 建议小组件的字号。
  "editor.suggestFontSize": 0,

  // 建议小组件的行高。
  "editor.suggestLineHeight": 0,

  // 控制在键入触发字符后是否自动显示建议。
  "editor.suggestOnTriggerCharacters": true,

  // 控制在建议列表中如何预先选择建议。
  //  - first: 始终选择第一个建议。
  //  - recentlyUsed: 选择最近的建议，除非进一步键入选择其他。例如 "console. -> console.log"，因为最近补全过 'log' 。
  //  - recentlyUsedByPrefix: 根据之前补全过建议的前缀选择建议。例如，"co -> console"、"con -> const"。
  "editor.suggestSelection": "recentlyUsed",

  // 当其前缀匹配时插入代码段。当 "quickSuggestions" 未启用时，效果最佳。
  "editor.tabCompletion": false,

  // 一个制表符等于的空格数。在 `editor.detectIndentation` 启用时，根据文件内容，该设置可能会被覆盖。
  "editor.tabSize": 4,

  // 覆盖当前所选颜色主题中的编辑器颜色和字体样式。
  "editor.tokenColorCustomizations": {},

  // 删除自动插入的尾随空白符号。
  "editor.trimAutoWhitespace": true,

  // 根据制表位插入和删除空格。
  "editor.useTabStops": true,

  // 控制是否根据文档中的文字计算自动完成列表。
  "editor.wordBasedSuggestions": true,

  // 执行单词相关的导航或操作时作为单词分隔符的字符。
  "editor.wordSeparators": "`~!@#$%^&*()-=+[{]}\\|;:'\",.<>/?",

  // 控制折行的方式。
  //  - off: 永不换行。
  //  - on: 将在视区宽度处换行。
  //  - wordWrapColumn: 在 `editor.wordWrapColumn` 处折行。
  //  - bounded: 在视区宽度和 `editor.wordWrapColumn` 中的较小值处折行。
  "editor.wordWrap": "off",

  // 在 `editor.wordWrap` 为 `wordWrapColumn`  或 `bounded` 时，控制编辑器的折行列。
  "editor.wordWrapColumn": 80,

  // 控制折行的缩进。
  //  - none: 没有缩进。折行从第 1 列开始。
  //  - same: 折行的缩进量与其父级相同。
  //  - indent: 折行的缩进量比其父级多 1。
  //  - deepIndent: 折行的缩进量比其父级多 2。
  "editor.wrappingIndent": "same"

}
,
{


  // 是否总是显示源代码管理提供程序部分。
  "scm.alwaysShowProviders": false,

  // 控制编辑器中差异的显示效果。
  "scm.diffDecorations": "all",

  // 控制导航线上已添加和已修改差异图标的宽度 (px)。
  "scm.diffDecorationsGutterWidth": 3

}
,
{


  // 控制工作台中活动栏的可见性。
  "workbench.activityBar.visible": true,

  // 覆盖当前所选颜色主题的颜色。
  "workbench.colorCustomizations": {},

  // 指定工作台中使用的颜色主题。
  "workbench.colorTheme": "Default Dark+",

  // 控制命令面板中保留最近使用命令的数量。设置为 0 时禁用命令历史功能。
  "workbench.commandPalette.history": 50,

  // 控制是否在再次打开命令面板时恢复上一次的输入内容。
  "workbench.commandPalette.preserveInput": false,

  // 控制编辑器组中最后一个选项卡关闭时这个空组的行为。若启用，将自动关闭空组。若禁用，空组仍将保留在网格布局中。
  "workbench.editor.closeEmptyGroups": true,

  // 当文件被其他某些进程删除或重命名时，控制是否自动关闭显示此文件的编辑器。若禁用此项，在这种情况下将保留编辑器为已更新编辑器。请注意，若从应用内部进行删除，将始终关闭编辑器，并且为了保护您的数据，已更新文件始终不会关闭。
  "workbench.editor.closeOnFileDelete": true,

  // 控制是否将打开的编辑器显示为预览。预览编辑器将会重用至其被保留(例如，通过双击或编辑)，且其字体样式将为斜体。
  "workbench.editor.enablePreview": true,

  // 控制 Quick Open 中打开的编辑器是否显示为预览。预览编辑器可以重新使用，直到将其保留(例如，通过双击或编辑)。
  "workbench.editor.enablePreviewFromQuickOpen": true,

  // 控制编辑器标签的格式。修改这项设置会让文件的路径更容易理解：
  // - short: "parent"
  // - medium: "workspace/src/parent"
  // - long: "/home/user/workspace/src/parent"
  // - default: 当与另一选项卡标题相同时为 ".../parent"。选项卡被禁用时则为相对工作区路径
  //  - default: 显示文件名。当启用选项卡且在同一组内有两个相同名称的文件时，将添加每个文件路径中可以用于区分的部分。在选项卡被禁用且编辑器活动时，将显示相对于工作区文件夹的路径。
  //  - short: 在文件的目录名之后显示文件名。
  //  - medium: 在文件相对当前工作区文件夹的路径之后显示文件名。
  //  - long: 在文件的绝对路径之后显示文件名。
  "workbench.editor.labelFormat": "default",

  // 控制编辑器打开的位置。选择 "left" 或 "right" 可分别在当前活动编辑器的左侧或右侧打开。选择 "first" (最前) 或 "last" (最后) 打开的位置与当前活动编辑器无关。
  "workbench.editor.openPositioning": "right",

  // 控制编辑器在并排打开时 (比如从资源管理器) 出现的默认位置。默认在当前活动编辑器右侧打开。若更改为 "down"，则在当前活动编辑器下方打开。
  "workbench.editor.openSideBySideDirection": "right",

  // 控制打开时编辑器是否显示在任何可见组中。如果禁用，编辑器会优先在当前活动编辑器组中打开。如果启用，会显示已打开的编辑器而不是在当前活动编辑器组中再次打开。请注意，有些情况下会忽略此设置，例如强制编辑器在特定组中或在当前活动组的边侧打开时。
  "workbench.editor.revealIfOpen": false,

  // 控制打开的编辑器是否随图标一起显示。这还需启用图标主题。
  "workbench.editor.showIcons": true,

  // 控制打开的编辑器是否显示在选项卡中。
  "workbench.editor.showTabs": true,

  // 控制编辑器的选项卡关闭按钮的位置，或当设置为 "off" 时禁用关闭它们。
  "workbench.editor.tabCloseButton": "right",

  // 控制编辑器选项卡的大小。若设置为 "fit"，选项卡将总是足够大，能够完全显示编辑器标签。若设置为 "shrink"，将在不能一次全部显示所有选项卡时，允许选项卡缩小。
  //  - fit: Always keep tabs large enough to show the full editor label.
  //  - shrink: Allow tabs to get smaller when the available space is not enough to show all tabs at once.
  "workbench.editor.tabSizing": "fit",

  // Fetches experiments to run from a Microsoft online service.
  "workbench.enableExperiments": true,

  // 指定在工作台中使用的图标主题，或指定 "null" 以不显示任何文件图标。
  //  - null: 无文件图标
  //  - vs-minimal
  //  - vs-seti
  //  - material-icon-theme
  "workbench.iconTheme": "vs-seti",

  // 在通过鼠标多选树和列表条目时使用的修改键 (例如资源管理器、打开的编辑器和源代码管理视图)。"ctrlCmd" 在 Windows 和 Linux 上会映射为 "Ctrl" ，在 macOS 上会映射为 "Command" 。“在侧边打开”功能所需的鼠标动作 (若可用) 将会相应调整，不与多选修改键冲突。
  //  - ctrlCmd: 映射为 "Ctrl" (Windows 和 Linux) 或 "Command" (macOS)
  //  - alt: 映射为 "Alt" (Windows 和 Linux) 或 "Option" (macOS)
  "workbench.list.multiSelectModifier": "ctrlCmd",

  // 控制如何在受支持的树和列表中使用鼠标来打开项目。设置为 "singleClick" 可单击打开项目，"doubleClick" 仅可双击打开项目。对于树中含子节点的节点，此设置将控制使用单击还是双击来展开他们。注意，某些不适用此项的树或列表可能会忽略此设置。
  "workbench.list.openMode": "singleClick",

  // 控制面板 (终端、调试控制台、输出、问题) 的默认位置。可显示在工作台的底部或右侧。
  "workbench.panel.defaultLocation": "bottom",

  // 控制 Quick Open 是否应在失去焦点时自动关闭。
  "workbench.quickOpen.closeOnFocusLost": true,

  // 控制是否在设置中启用自然语言搜索模式。
  "workbench.settings.enableNaturalLanguageSearch": true,

  // 控制是否在打开按键绑定设置的同时打开显示所有默认按键绑定的编辑器。
  "workbench.settings.openDefaultKeybindings": true,

  // 控制打开设置时是否打开显示所有默认设置的编辑器。
  "workbench.settings.openDefaultSettings": true,

  // 控制设置编辑器的目录在搜索时的行为。
  "workbench.settings.settingsSearchTocBehavior": "filter",

  // 控制是否显示设置编辑器的目录。
  "workbench.settings.tocVisible": true,

  // 控制边栏的位置。它可显示在工作台的左侧或右侧。
  "workbench.sideBar.location": "left",

  // 在未能恢复上一会话信息的情况下，控制启动时显示的编辑器。选择 "none" 表示启动时不打开编辑器，"welcomePage" 表示打开欢迎页面(默认)，"newUntitledFile" 表示打开新的无标题文档(仅打开一个空工作区)。
  //  - none: 启动(不带编辑器)。
  //  - welcomePage: 打开欢迎页面（默认）。
  //  - newUntitledFile: 打开新的无标题文档
  "workbench.startupEditor": "welcomePage",

  // 控制是否显示工作台底部状态栏中的 Twitter 反馈 (笑脸图标)。
  "workbench.statusBar.feedback.visible": true,

  // 控制工作台底部状态栏的可见性。
  "workbench.statusBar.visible": true,

  // 启用后，当没有打开编辑器时将显示水印提示。
  "workbench.tips.enabled": true,

  // 控制工作台中的树控件是否支持水平滚动。
  "workbench.tree.horizontalScrolling": false,

  // 控制是否显示视图头部的操作项。视图头部操作项可以一直，或是仅当聚焦到和悬停在视图上时显示。
  "workbench.view.alwaysShowHeaderActions": false

}
,
{


  // 如果已启用，将自动更改为高对比度主题；如果 Windows 正在使用高对比度主题，则当离开 Windows 高对比度主题时会更改为深色主题。
  "window.autoDetectHighContrast": true,

  // 控制关闭最后一个编辑器是否关闭整个窗口。此设置仅适用于不显示文件夹的窗口。
  "window.closeWhenEmpty": false,

  // 启用后，即可使用 Alt 快捷键打开主菜单。若禁用助记键，这些 Alt 快捷键将能绑定到编辑器命令。
  "window.enableMenuBarMnemonics": true,

  // 控制菜单栏的可见性。“切换”设置表示隐藏菜单栏，按一次 Alt 键则将显示此菜单栏。默认情况下，除非窗口为全屏，否则菜单栏可见。
  //  - default: 菜单仅在全屏模式下隐藏。
  //  - visible: 菜单始终可见，即使处于全屏模式下。
  //  - toggle: 菜单隐藏，但可以通过 Alt 键显示。
  //  - hidden: 菜单始终隐藏。
  "window.menuBarVisibility": "default",

  // 控制在已有窗口时新开窗口的尺寸。请注意，此设置对第一个打开的窗口无效。第一个窗口将始终恢复关闭前的大小和位置。
  //  - default: 在屏幕中心打开新窗口。
  //  - inherit: 以与上一个活动窗口相同的尺寸打开新窗口。
  //  - maximized: 打开最大化的新窗口。
  //  - fullscreen: 在全屏模式下打开新窗口。
  "window.newWindowDimensions": "default",

  // 控制是否在新窗口中打开文件。
  // - default: 除了从软件内部选择的文件 (如，从“文件”菜单选择)，其他所有文件都将在新窗口中打开
  // - on: 文件将在新窗口中打开
  // - off: 文件将在其所在文件夹的已有窗口中打开，或在上一个活动窗口中打开
  // 注意，此设置可能会被忽略 (例如，在使用 -new-window 或 -reuse-window 命令行选项时)。
  //  - on: 文件将在新窗口中打开
  //  - off: 文件将在该文件的文件夹打开的窗口中打开，或在上一个活动窗口中打开
  //  - default: 除了从软件内部选择的文件 (如，从“文件”菜单选择)，其他所有文件都将在新窗口中打开
  "window.openFilesInNewWindow": "off",

  // 控制文件夹应在新窗口中打开还是替换上一活动窗口。
  // - default: 文件夹将在新窗口中打开，除非文件是从应用程序内选取的(例如通过“文件”菜单)
  // - on: 文件夹将在新窗口中打开
  // - off: 文件夹将替换上一活动窗口
  // 注意，可能仍会存在忽略此设置的情况(例如当使用 -new-window 或 -reuse-window 命令行选项时)。
  //  - on: 文件夹将在新窗口中打开
  //  - off: 文件夹将替换上一个活动窗口
  //  - default: 文件夹在新窗口中打开，除非从应用程序内选取一个文件夹(例如，通过“文件”菜单)
  "window.openFoldersInNewWindow": "default",

  // 控制在另一实例无参启动时打开新的空窗口或是聚焦到最后运行的实例
  // - on: 打开新的空窗口
  // - off: 最后活动的运行实例将获得焦点
  // 注意，此设置可能会被忽略 (例如，在使用 -new-window 或 -reuse-window 命令行选项时)。
  //  - on: 打开一个新的空窗口
  //  - off: 聚焦于最后活动的运行实例
  "window.openWithoutArgumentsInNewWindow": "on",

  // 若窗口在处于全屏模式时退出，控制其在恢复时是否还原到全屏模式。
  "window.restoreFullscreen": false,

  // 控制窗口在重启后再次打开的方式。
  //  - all: 重新打开所有窗口。
  //  - folders: 重新打开所有文件夹。空工作区将不会被恢复。
  //  - one: 重新打开上一个活动窗口。
  //  - none: 永远不重新打开窗口。总是以一个空窗口启动。
  "window.restoreWindows": "one",

  // 启用解决方案来修复在还原最小化的 VS Code 窗口后平滑滚动消失的问题。这个问题出现在拥有精确式触控板的设备上，比如 Microsoft 的 Surface 设备(https://github.com/Microsoft/vscode/issues/13612)。如果启用此方案，在从最小化状态中还原后，窗口布局可能会有些许闪烁，其他方面则不会有影响。注意: 为确保此方案有效，请确保同时将 `window.titleBarStyle` 设置为 `native`。
  "window.smoothScrollingWorkaround": false,

  // 根据活动编辑器控制窗口标题。变量基于上下文进行替换:
  // - `${activeEditorShort}`: 文件名 (如 myFile.txt)。
  // - `${activeEditorMedium}`: 相对于工作区文件夹的文件路径 (如 myFolder/myFile.txt)。
  // - `${activeEditorLong}`: 文件的完整路径 (如 /Users/Development/myProject/myFolder/myFile.txt)。
  // - `${folderName}`: 文件所在工作区文件夹名称 (如 myFolder)。
  // - `${folderPath}`: 文件所在工作区文件夹路径 (如 /Users/Development/myFolder)。
  // - `${rootName}`: 工作区名称 (如 myFolder 或 myWorkspace)。
  // - `${rootPath}`: 工作区路径 (如 /Users/Development/myWorkspace)。
  // - `${appName}`: 如 VS Code。
  // - `${dirty}`: 活动编辑器有更新时显示的更新指示器。
  // - `${separator}`: 仅在被有值变量或静态文本包围时显示的分隔符 (" - ")。
  "window.title": "${dirty}${activeEditorShort}${separator}${rootName}${separator}${appName}",

  // 调整窗口标题栏的外观。更改需要在完全重启后才能应用。
  "window.titleBarStyle": "native",

  // 调整窗口的缩放级别。原始大小是 0，每次递增(例如 1)或递减(例如 -1)表示放大或缩小 20%。也可以输入小数以便以更精细的粒度调整缩放级别。
  "window.zoomLevel": 0

}
,
{


  // 配置语言的文件关联 (如: `"*.extension": "html"`)。这些关联的优先级高于已安装语言的默认关联。
  "files.associations": {},

  // 启用后，将在文件打开时尝试猜测字符集编码。可以按语言对此项进行配置。
  "files.autoGuessEncoding": false,

  // 控制已更新文件的自动保存。可在[此处](https://code.visualstudio.com/docs/editor/codebasics#_save-auto-save) 阅读有关自动保存的详细信息。
  //  - off: 永不自动保存更新后的文件。
  //  - afterDelay: 当文件修改后的时间超过 `files.autoSaveDelay` 中配置的值时自动进行保存。
  //  - onFocusChange: 编辑器失去焦点时自动保存更新后的文件。
  //  - onWindowChange: 窗口失去焦点时自动保存更新后的文件。
  "files.autoSave": "off",

  // 控制自动保存已更新文件的延迟时间 (毫秒)。仅在 `files.autoSave` 设置为 `afterDelay` 时生效。
  "files.autoSaveDelay": 1000,

  // 分配给新文件的默认语言模式。
  "files.defaultLanguage": "",

  // 在读取和写入文件时使用的默认字符集编码。可以按语言对此项进行配置。
  //  - utf8: UTF-8
  //  - utf8bom: UTF-8 with BOM
  //  - utf16le: UTF-16 LE
  //  - utf16be: UTF-16 BE
  //  - windows1252: Western (Windows 1252)
  //  - iso88591: Western (ISO 8859-1)
  //  - iso88593: Western (ISO 8859-3)
  //  - iso885915: Western (ISO 8859-15)
  //  - macroman: Western (Mac Roman)
  //  - cp437: DOS (CP 437)
  //  - windows1256: Arabic (Windows 1256)
  //  - iso88596: Arabic (ISO 8859-6)
  //  - windows1257: Baltic (Windows 1257)
  //  - iso88594: Baltic (ISO 8859-4)
  //  - iso885914: Celtic (ISO 8859-14)
  //  - windows1250: Central European (Windows 1250)
  //  - iso88592: Central European (ISO 8859-2)
  //  - cp852: Central European (CP 852)
  //  - windows1251: Cyrillic (Windows 1251)
  //  - cp866: Cyrillic (CP 866)
  //  - iso88595: Cyrillic (ISO 8859-5)
  //  - koi8r: Cyrillic (KOI8-R)
  //  - koi8u: Cyrillic (KOI8-U)
  //  - iso885913: Estonian (ISO 8859-13)
  //  - windows1253: Greek (Windows 1253)
  //  - iso88597: Greek (ISO 8859-7)
  //  - windows1255: Hebrew (Windows 1255)
  //  - iso88598: Hebrew (ISO 8859-8)
  //  - iso885910: Nordic (ISO 8859-10)
  //  - iso885916: Romanian (ISO 8859-16)
  //  - windows1254: Turkish (Windows 1254)
  //  - iso88599: Turkish (ISO 8859-9)
  //  - windows1258: Vietnamese (Windows 1258)
  //  - gbk: Simplified Chinese (GBK)
  //  - gb18030: Simplified Chinese (GB18030)
  //  - cp950: Traditional Chinese (Big5)
  //  - big5hkscs: Traditional Chinese (Big5-HKSCS)
  //  - shiftjis: Japanese (Shift JIS)
  //  - eucjp: Japanese (EUC-JP)
  //  - euckr: Korean (EUC-KR)
  //  - windows874: Thai (Windows 874)
  //  - iso885911: Latin/Thai (ISO 8859-11)
  //  - koi8ru: Cyrillic (KOI8-RU)
  //  - koi8t: Tajik (KOI8-T)
  //  - gb2312: Simplified Chinese (GB 2312)
  //  - cp865: Nordic DOS (CP 865)
  //  - cp850: Western European DOS (CP 850)
  "files.encoding": "utf8",

  // 默认行尾字符。
  //  - \n: LF
  //  - \r\n: CRLF
  "files.eol": "\r\n",

  // 配置 glob 模式以在搜索中排除文件和文件夹。例如，文件资源管理器根据此设置决定文件或文件夹的显示和隐藏。
  "files.exclude": {
    "**/.git": true,
    "**/.svn": true,
    "**/.hg": true,
    "**/CVS": true,
    "**/.DS_Store": true
  },

  // 控制是否在会话间记住未保存的文件，以允许在退出编辑器时跳过保存提示。
  //  - off: 禁用热退出。
  //  - onExit: 在 Windows/Linux 平台关闭最后一个窗口，或者在全平台触发 `workbench.action.quit` 命令 (命令托盘、键绑定、菜单) 时进行热退出。下次启动时将还原所有已备份的窗口。
  //  - onExitAndWindowClose: 在 Windows/Linux 平台关闭最后一个窗口、触发 `workbench.action.quit` 命令 (命令托盘、键绑定、菜单) 会引起应用程序关闭。对于任何有文件夹打开的窗口，则不论该窗口是否是最后一个窗口进行热退出。下次启动时将还原所有未打开文件夹的窗口。若要还原打开有文件夹的窗口，请将 `window.restoreWindows` 设置为 `all`。
  "files.hotExit": "onExit",

  // 启用后，保存文件时在文件末尾插入一个最终新行。
  "files.insertFinalNewline": false,

  // 在打开大型文件时，控制 VS Code 可在重启后使用的内存。在命令行中指定 `--max-memory=新的大小` 参数可达到相同效果。
  "files.maxMemoryForLargeFilesMB": 4096,

  // 启用后，保存文件时将删除在最终新行后的所有新行。
  "files.trimFinalNewlines": false,

  // 启用后，将在保存文件时剪裁尾随空格。
  "files.trimTrailingWhitespace": false,

  // 使用新版实验性文件监视。
  "files.useExperimentalFileWatcher": false,

  // 配置文件路径的 glob 模式以从文件监视排除。模式必须在绝对路径上匹配(例如 ** 前缀或完整路径需正确匹配)。更改此设置需要重启。如果在启动时遇到 Code 消耗大量 CPU 时间，则可以排除大型文件夹以减少初始加载。
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/.git/subtree-cache/**": true,
    "**/node_modules/*/**": true
  }

}
,
{


  // 控制在打开禅模式时是否启用居中布局。
  "zenMode.centerLayout": true,

  // 控制在打开禅模式时是否将工作台切换到全屏。
  "zenMode.fullScreen": true,

  // 控制在打开禅模式时是否隐藏工作台左侧的活动栏。
  "zenMode.hideActivityBar": true,

  // 控制在打开禅模式时是否隐藏工作台底部的状态栏。
  "zenMode.hideStatusBar": true,

  // 控制在打开禅模式时是否隐藏工作台选项卡。
  "zenMode.hideTabs": true,

  // 若窗口在处于禅模式时退出，控制其在恢复时是否还原到禅模式。
  "zenMode.restore": false

}
,
{


  // 控制资源管理器是否应在打开文件时自动显示并选择它们。
  "explorer.autoReveal": true,

  // 控制资源管理器是否应在删除文件到废纸篓时进行确认。
  "explorer.confirmDelete": true,

  // 控制在资源管理器内拖放移动文件或文件夹时是否进行确认。
  "explorer.confirmDragAndDrop": true,

  // 控制文件修饰是否用徽章。
  "explorer.decorations.badges": true,

  // 控制文件修饰是否用颜色。
  "explorer.decorations.colors": true,

  // 控制资源管理器是否应该允许通过拖放移动文件和文件夹。
  "explorer.enableDragAndDrop": true,

  // 在“打开的编辑器”窗格中显示的编辑器数量。
  "explorer.openEditors.visible": 9,

  // 控制文件和文件夹在资源管理器中的排列顺序。
  //  - default: 按名称的字母顺序排列文件和文件夹。文件夹显示在文件前。
  //  - mixed: 按名称的字母顺序排列文件和文件夹。两者穿插显示。
  //  - filesFirst: 按名称的字母顺序排列文件和文件夹。文件显示在文件夹前。
  //  - type: 按扩展名的字母顺序排列文件和文件夹。文件夹显示在文件前。
  //  - modified: 按最后修改日期降序排列文件和文件夹。文件夹显示在文件前。
  "explorer.sortOrder": "default"

}
,
{


  // 配置在搜索中排除的文件和文件夹的 glob 模式。已继承 `files.exclude` 设置的所有 glob 模式。可在[此处](https://code.visualstudio.com/docs/editor/codebasics#_advanced-search-options) 阅读有关 glob 模式的详细信息。
  "search.exclude": {
    "**/node_modules": true,
    "**/bower_components": true
  },

  // 控制是否在搜索中跟踪符号链接。
  "search.followSymlinks": true,

  // 控制搜索功能是显示在侧边栏，还是显示在水平空间更大的面板区域。
  "search.location": "sidebar",

  // 控制 Quick Open 文件结果中是否包括全局符号搜索的结果。
  "search.quickOpen.includeSymbols": false,

  // 若搜索词全为小写，则不区分大小写进行搜索，否则区分大小写进行搜索。
  "search.smartCase": false,

  // 控制搜索文件时是否使用 .gitignore 和 .ignore 文件。
  "search.useIgnoreFiles": true,

  // 控制是否在文本和文件搜索中使用 ripgrep
  "search.useRipgrep": true

}
,
{


  // 使用的代理设置。如果没有设置，将从 http_proxy 和 https_proxy 环境变量中获取。
  "http.proxy": "",

  // 要作为每个网络请求的 "Proxy-Authorization" 标头发送的值。
  "http.proxyAuthorization": null,

  // 控制是否根据提供的 CA 列表验证代理服务器证书。
  "http.proxyStrictSSL": true

}
,
{


  // 配置是否从更新通道接收自动更新。更改后需要重启。
  "update.channel": "default",

  // 启用 Windows 后台更新。
  "update.enableWindowsBackgroundUpdates": true,

  // 更新后显示发行说明。
  "update.showReleaseNotes": true

}
,
{


  // 启用/禁用 HTML 标记的自动关闭。
  "html.autoClosingTags": true,

  // 以逗号分隔的标记列表，不应在其中重新设置内容的格式。"null" 默认为 "pre" 标记。
  "html.format.contentUnformatted": "pre,code,textarea",

  // 启用或禁用默认 HTML 格式化程序。
  "html.format.enable": true,

  // 以新行结束。
  "html.format.endWithNewline": false,

  // 标记列表，以逗号分隔，其前应有额外新行。"null" 默认为“标头、正文、/html”。
  "html.format.extraLiners": "head, body, /html",

  // 格式和缩进 {{#foo}} 和 {{/foo}}。
  "html.format.indentHandlebars": false,

  // 缩进 <head> 和 <body> 部分。
  "html.format.indentInnerHtml": false,

  // 要保留在一个区块中的换行符的最大数量。对于无限制使用 "null"。
  "html.format.maxPreserveNewLines": null,

  // 控制是否保留元素前已有的换行符。仅适用于元素前，不适用于标签内或文本。
  "html.format.preserveNewLines": true,

  // 以逗号分隔的标记列表不应重设格式。"null" 默认为所有列于 https://www.w3.org/TR/html5/dom.html#phrasing-content 的标记。
  "html.format.unformatted": "wbr",

  // 对属性进行换行。
  //  - auto: 仅在超出行长度时才对属性进行换行。
  //  - force: 对除第一个属性外的其他每个属性进行换行。
  //  - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。
  //  - force-expand-multiline: 对每个属性进行换行。
  "html.format.wrapAttributes": "auto",

  // 每行最大字符数(0 = 禁用)。
  "html.format.wrapLineLength": 120,

  // 配置内置 HTML 语言支持是否建议 Angular V1 标记和属性。
  "html.suggest.angular1": false,

  // 配置内置 HTML 语言支持是否建议 HTML5 标记、属性和值。
  "html.suggest.html5": true,

  // 配置内置 HTML 语言支持是否建议 Ionic 标记、属性和值。
  "html.suggest.ionic": false,

  // 跟踪 VS Code 与 HTML 语言服务器之间的通信。
  "html.trace.server": "off",

  // 配置内置的 HTML 语言支持是否对嵌入的脚本进行验证。
  "html.validate.scripts": true,

  // 配置内置 HTML 语言支持是否对嵌入的样式进行验证。
  "html.validate.styles": true

}
,
{


  // 启用/禁用默认 JSON 格式化程序(需要重启)
  "json.format.enable": true,

  // 将当前项目中的 JSON 文件与架构关联起来
  "json.schemas": [],

  // 跟踪 VS Code 与 JSON 语言服务器之间的通信。
  "json.trace.server": "off"

}
,
{


  // 设置换行符如何在 markdown 预览中呈现。将其设置为 "true" 会为每一个新行创建一个 <br>。
  "markdown.preview.breaks": false,

  // 在 Markdown 预览中双击切换到编辑器。
  "markdown.preview.doubleClickToSwitchToEditor": true,

  // 控制 Markdown 预览中使用的字体系列。
  "markdown.preview.fontFamily": "-apple-system, BlinkMacSystemFont, 'Segoe WPC', 'Segoe UI', 'HelveticaNeue-Light', 'Ubuntu', 'Droid Sans', sans-serif",

  // 控制 Markdown 预览中使用的字号(以像素为单位)。
  "markdown.preview.fontSize": 14,

  // 控制 Markdown 预览中使用的行高。此数值与字号相关。
  "markdown.preview.lineHeight": 1.6,

  // 在 Markdown 预览中启用或禁用将类似 URL 的文本转换为链接。
  "markdown.preview.linkify": true,

  // 在 Markdown 预览中标记当前的编辑器选定内容。
  "markdown.preview.markEditorSelection": true,

  // 滚动 Markdown 预览时，更新其编辑器视图。
  "markdown.preview.scrollEditorWithPreview": true,

  // 滚动 Markdown 编辑器时，更新其预览视图。
  "markdown.preview.scrollPreviewWithEditor": true,

  // 设置如何在 Markdown 预览中呈现 YAML 扉页。“隐藏”会删除扉页。否则，扉页则被视为 Markdown 内容。
  "markdown.previewFrontMatter": "hide",

  // 要在 Markdown 预览中使用的 CSS 样式表的 URL 或本地路径列表。相对路径被解释为相对于资源管理器中打开的文件夹。如果没有任何打开的文件夹，则会被解释为相对于 Markdown 文件的位置。所有的 "\" 需写为 "\\"。
  "markdown.styles": [],

  // 对 Markdown 扩展启用调试日志记录。
  "markdown.trace": "off"

}
,
{


  // 如果已启用内置 PHP 语言建议，则进行配置。此支持建议 PHP 全局变量和变量。
  "php.suggest.basic": true,

  // 启用/禁用内置的 PHP 验证。
  "php.validate.enable": true,

  // 指向 PHP 可执行文件。
  "php.validate.executablePath": null,

  // 决定 linter 是在保存时还是输入时运行。
  "php.validate.run": "onSave"

}
,
{


  // 启用或禁用自动关闭 JSX 标签。要求工作区使用高于 3.0 版本的 TypeScript。
  "javascript.autoClosingTags": true,

  // 启用/禁用 JavaScript 格式化程序。
  "javascript.format.enable": true,

  // 定义逗号分隔符后面的空格处理。
  "javascript.format.insertSpaceAfterCommaDelimiter": true,

  // 定义 constructor 关键字后的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。
  "javascript.format.insertSpaceAfterConstructor": false,

  // 定义匿名函数的函数关键字后面的空格处理。
  "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // 定义控制流语句中关键字后面的空格处理。
  "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // 定义非空大括号中左括号后和右括号前的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // 定义非空中括号的左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // 定义非空小括号的左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // 定义模板字符串括号中左括号后和右括号前的空格处理方式。
  "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // 定义 for 语句中分号之后的空格处理方式。
  "javascript.format.insertSpaceAfterSemicolonInForStatements": true,

  // 定义二进制运算符后面的空格处理
  "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // 定义函数参数括号前的空格处理方式。
  "javascript.format.insertSpaceBeforeFunctionParenthesis": false,

  // 定义控制块的左括号是否放置在新的一行。
  "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // 定义函数的左大括号是否放置在新的一行。
  "javascript.format.placeOpenBraceOnNewLineForFunctions": false,

  // 启用或禁用 JavaScript 文件的语义检查。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 2.3.1 版本的 TypeScript。
  "javascript.implicitProjectConfig.checkJs": false,

  // 对不属于任何工程的 JavaScript 文件启用或禁用 `experimentalDecorators` 设置。若有 jsconfig.json 或 tsconfig.json 文件，将覆盖此设置。要求工作区使用高于 2.3.1 版本的 TypeScript。
  "javascript.implicitProjectConfig.experimentalDecorators": false,

  // 启用/禁用在 JavaScript 建议列表中包含文件中的唯一名称。
  "javascript.nameSuggestions": true,

  // 自动 import 语句中路径的首选样式。
  //  - auto: 推断最短的路径类型。
  //  - relative: 相对于文件位置。
  //  - non-relative: 根据 `jsconfig.json` 或 `tsconfig.json` 中配置的 `baseUrl` 。
  "javascript.preferences.importModuleSpecifier": "auto",

  // 用于快速修复的首选引用样式: "single" (单引号)、"double" (双引号) 或 "auto" (从已有 import 语句中推测引号类型)。要求工作区使用高于 2.9 版本的 TypeScript。
  "javascript.preferences.quoteStyle": "auto",

  // 启用/禁用在 JavaScript 文件中引用 CodeLens。
  "javascript.referencesCodeLens.enabled": false,

  // 启用或禁用编辑器中 JavaScript 文件的建议诊断。要求工作区使用高于 2.8 版本的 TypeScript。
  "javascript.suggestionActions.enabled": true,

  // 当在 VS Code 中重命名或移动文件时，启用或禁用自动更新导入路径。要求工作区使用高于 2.9 版本的 TypeScript。
  "javascript.updateImportsOnFileMove.enabled": "prompt",

  // 启用/禁用 JavaScript 验证。
  "javascript.validate.enable": true,

  // 启用/禁用自动 JSDoc 注释
  "jsDocCompletion.enabled": true,

  // 启用或禁用自动关闭 JSX 标签。要求工作区使用高于 3.0 版本的 TypeScript。
  "typescript.autoClosingTags": true,

  // 启用或禁用自动导入建议。要求工作区使用高于 2.6.1 版本的 TypeScript。
  "typescript.autoImportSuggestions.enabled": true,

  // 检查是否安装了 NPM 以自动获取类型。
  "typescript.check.npmIsInstalled": true,

  // 禁用自动获取类型。
  "typescript.disableAutomaticTypeAcquisition": false,

  // 启用/禁用默认 TypeScript 格式化程序。
  "typescript.format.enable": true,

  // 定义逗号分隔符后面的空格处理。
  "typescript.format.insertSpaceAfterCommaDelimiter": true,

  // 定义 constructor 关键字后的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。
  "typescript.format.insertSpaceAfterConstructor": false,

  // 定义匿名函数的函数关键字后面的空格处理。
  "typescript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,

  // 定义控制流语句中关键字后面的空格处理。
  "typescript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,

  // 定义 JSX 表达式括号中左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,

  // 定义非空大括号中左括号后和右括号前的空格处理方式。要求工作区使用高于 2.3.0 版本的 TypeScript。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,

  // 定义非空中括号的左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,

  // 定义非空小括号的左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,

  // 定义模板字符串括号中左括号后和右括号前的空格处理方式。
  "typescript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,

  // 定义 for 语句中分号之后的空格处理方式。
  "typescript.format.insertSpaceAfterSemicolonInForStatements": true,

  // 定义 TypeScript 中类型断言后的空格处理方式。要求工作区使用高于 2.4 版本的 TypeScript。
  "typescript.format.insertSpaceAfterTypeAssertion": false,

  // 定义二进制运算符后面的空格处理
  "typescript.format.insertSpaceBeforeAndAfterBinaryOperators": true,

  // 定义函数参数括号前的空格处理方式。
  "typescript.format.insertSpaceBeforeFunctionParenthesis": false,

  // 定义控制块的左括号是否放置在新的一行。
  "typescript.format.placeOpenBraceOnNewLineForControlBlocks": false,

  // 定义函数的左大括号是否放置在新的一行。
  "typescript.format.placeOpenBraceOnNewLineForFunctions": false,

  // 启用/禁用实现 CodeLens。
  "typescript.implementationsCodeLens.enabled": false,

  // 设置在报告 JavaScript 和 TypeScript 的错误时使用的区域设置。要求工作区使用高于 2.6.0 版本的 TypeScript。默认 ("null") 将使用 VS Code 的区域设置。
  "typescript.locale": null,

  // 指定用于自动获取类型的 NPM 可执行文件的路径。要求工作区使用高于 2.3.4 版本的 TypeScript。
  "typescript.npm": null,

  // 自动 import 语句中路径的首选样式。
  //  - auto: 推断最短的路径类型。
  //  - relative: 相对于文件位置。
  //  - non-relative: 根据 `jsconfig.json` 或 `tsconfig.json` 中配置的 `baseUrl` 。
  "typescript.preferences.importModuleSpecifier": "auto",

  // 用于快速修复的首选引用样式: "single" (单引号)、"double" (双引号) 或 "auto" (从已有 import 语句中推测引号类型)。要求工作区使用高于 2.9 版本的 TypeScript。
  "typescript.preferences.quoteStyle": "auto",

  // 当输入导入路径时启用或禁用快速建议。
  "typescript.quickSuggestionsForPaths": true,

  // 在 TypeScript 文件中启用或禁用引用 CodeLens。
  "typescript.referencesCodeLens.enabled": false,

  // 将风格检查问题报告为警告
  "typescript.reportStyleChecksAsWarnings": true,

  // 启用或禁用编辑器中 TypeScript 文件的建议诊断。要求工作区使用高于 2.8 版本的 TypeScript。
  "typescript.suggestionActions.enabled": true,

  // 控制对 tsc 任务的自动检测。
  //  - on: 同时创建生成和监视任务。
  //  - off: 禁用此功能。
  //  - build: 仅创建单次运行编译任务。
  //  - watch: 仅创建编译和监视任务。
  "typescript.tsc.autoDetect": "on",

  // 指定包含要使用的 tsserver 和 lib*.d.ts 文件的文件夹路径。
  "typescript.tsdk": null,

  // 将 TS 服务器的日志保存到一个文件。此日志可用于诊断 TS 服务器问题。日志可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
  "typescript.tsserver.log": "off",

  // 其他用于搜索 TypeScript 语言服务插件的路径。要求工作区使用高于 2.3.0 版本的 TypeScript。
  "typescript.tsserver.pluginPaths": [],

  // 对发送到 TS 服务器的消息启用跟踪。此跟踪信息可用于诊断 TS 服务器问题。 跟踪信息可能包含你的项目中的文件路径、源代码和其他可能敏感的信息。
  "typescript.tsserver.trace": "off",

  // 当在 VS Code 中重命名或移动文件时，启用或禁用自动更新导入路径。要求工作区使用高于 2.9 版本的 TypeScript。
  //  - prompt: 在每次重命名时进行提示。
  //  - always: 始终自动更新路径。
  //  - never: 一律不要重命名路径，也不要提示。
  "typescript.updateImportsOnFileMove.enabled": "prompt",

  // 完成函数的参数签名。
  "typescript.useCodeSnippetsOnMethodSuggest": false,

  // 启用/禁用 TypeScript 验证。
  "typescript.validate.enable": true

}
,
{


  // 允许在任何文件中设置断点
  "debug.allowBreakpointsEverywhere": false,

  // 控制调试过程中是否启用非调试悬停提示。若为 "true"，将调用悬停提供程序提供悬停提示。即使此项设置为 "true"，普通悬停提示也不会显示。
  "debug.enableAllHovers": false,

  // 调试时，在编辑器中显示变量值内联
  "debug.inlineValues": false,

  // 内部调试控制台的控制行为。
  "debug.internalConsoleOptions": "openOnFirstSessionStart",

  // 控制是否在调试会话开始时打开调试视图。
  "debug.openDebug": "openOnFirstSessionStart",

  // 调试会话结束时自动打开资源管理器视图
  "debug.openExplorerOnEnd": false,

  // 控制何时显示调试状态栏
  //  - never: 在状态栏中不再显示调试
  //  - always: 始终在状态栏中显示调试
  //  - onFirstSessionStart: 仅于第一次启动调试后在状态栏中显示调试
  "debug.showInStatusBar": "onFirstSessionStart",

  // 控制调试工具栏位置。其位置可为 "floating" (在所有视图之上浮动)、"docked" (停靠于“调试”视图) 或 "hidden" (隐藏)
  "debug.toolBarLocation": "floating",

  // 全局的调试启动配置。应用作跨工作区共享的 "launch.json" 的替代。
  "launch": {
    "configurations": [],
    "compounds": []
  }

}
,
{


  // 参数数量无效
  "css.lint.argumentsInColorFunction": "error",

  // 使用边距或边框时，不要使用宽度或高度
  "css.lint.boxModel": "ignore",

  // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
  "css.lint.compatibleVendorPrefixes": "ignore",

  // 不要使用重复的样式定义
  "css.lint.duplicateProperties": "ignore",

  // 不要使用空规则集
  "css.lint.emptyRules": "warning",

  // 避免使用“float”。浮动会带来脆弱的 CSS，如果布局的某一方面更改，将很容易破坏 CSS。
  "css.lint.float": "ignore",

  // `@font-face` 规则必须定义 `src` 和 `font-family` 属性
  "css.lint.fontFaceProperties": "warning",

  // 十六进制颜色必须由三个或六个十六进制数字组成
  "css.lint.hexColorLength": "error",

  // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
  "css.lint.idSelector": "ignore",

  // 仅在需要支持 IE7 及更低版本时，才需要 IE hack。
  "css.lint.ieHack": "ignore",

  // 避免使用 !important。它表明整个 CSS 的特异性已经失去控制且需要重构。
  "css.lint.important": "ignore",

  // import 语句没有并行加载。
  "css.lint.importStatement": "ignore",

  // 由于 `display` 属性值，属性被忽略。例如，使用 `display: inline` 时，`width`、`height`、`margin-top`、`margin-bottom` 和 `float` 属性将不起作用。
  "css.lint.propertyIgnoredDueToDisplay": "warning",

  // 通配选择符 (*) 的运行效率低。
  "css.lint.universalSelector": "ignore",

  // 未知的 @ 规则。
  "css.lint.unknownAtRules": "warning",

  // 未知的属性。
  "css.lint.unknownProperties": "warning",

  // 未知的供应商特定属性。
  "css.lint.unknownVendorSpecificProperties": "ignore",

  // 使用厂商特定的前缀时，同时添加标准属性。
  "css.lint.vendorPrefix": "warning",

  // 零不需要单位。
  "css.lint.zeroUnits": "ignore",

  // 跟踪 VS Code 与 CSS 语言服务器之间的通信。
  "css.trace.server": "off",

  // 启用或禁用所有验证
  "css.validate": true

}
,
{


  // 参数数量无效
  "less.lint.argumentsInColorFunction": "error",

  // 使用边距或边框时，不要使用宽度或高度
  "less.lint.boxModel": "ignore",

  // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
  "less.lint.compatibleVendorPrefixes": "ignore",

  // 不要使用重复的样式定义
  "less.lint.duplicateProperties": "ignore",

  // 不要使用空规则集
  "less.lint.emptyRules": "warning",

  // 避免使用“float”。浮动会带来脆弱的 CSS，如果布局的某一方面更改，将很容易破坏 CSS。
  "less.lint.float": "ignore",

  // `@font-face` 规则必须定义 `src` 和 `font-family` 属性
  "less.lint.fontFaceProperties": "warning",

  // 十六进制颜色必须由三个或六个十六进制数字组成
  "less.lint.hexColorLength": "error",

  // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
  "less.lint.idSelector": "ignore",

  // 仅当支持 IE7 及更低版本时，才需要 IE hack
  "less.lint.ieHack": "ignore",

  // 避免使用 !important。它表明整个 CSS 的特异性已经失去控制且需要重构。
  "less.lint.important": "ignore",

  // Import 语句不会并行加载
  "less.lint.importStatement": "ignore",

  // 因显示而忽略属性。例如，使用 "display: inline"时，宽度、高度、上边距、下边距和 float 属性将不起作用
  "less.lint.propertyIgnoredDueToDisplay": "warning",

  // 通配选择符 (*) 运行效率低
  "less.lint.universalSelector": "ignore",

  // 未知的属性。
  "less.lint.unknownProperties": "warning",

  // 未知的供应商特定属性。
  "less.lint.unknownVendorSpecificProperties": "ignore",

  // 使用厂商特定的前缀时，同时添加标准属性。
  "less.lint.vendorPrefix": "warning",

  // 零不需要单位
  "less.lint.zeroUnits": "ignore",

  // 启用或禁用所有验证
  "less.validate": true

}
,
{


  // 参数数量无效
  "scss.lint.argumentsInColorFunction": "error",

  // 使用边距或边框时，不要使用宽度或高度
  "scss.lint.boxModel": "ignore",

  // 使用厂商特定的前缀时，同时添加所有其他厂商特定的属性。
  "scss.lint.compatibleVendorPrefixes": "ignore",

  // 不要使用重复的样式定义
  "scss.lint.duplicateProperties": "ignore",

  // 不要使用空规则集
  "scss.lint.emptyRules": "warning",

  // 避免使用“float”。浮动会带来脆弱的 CSS，如果布局的某一方面更改，将很容易破坏 CSS。
  "scss.lint.float": "ignore",

  // `@font-face` 规则必须定义 `src` 和 `font-family` 属性
  "scss.lint.fontFaceProperties": "warning",

  // 十六进制颜色必须由三个或六个十六进制数字组成
  "scss.lint.hexColorLength": "error",

  // 选择器不应包含 ID，因为这些规则与 HTML 的耦合过于紧密。
  "scss.lint.idSelector": "ignore",

  // 仅当支持 IE7 及更低版本时，才需要 IE hack
  "scss.lint.ieHack": "ignore",

  // 避免使用 !important。它表明整个 CSS 的特异性已经失去控制且需要重构。
  "scss.lint.important": "ignore",

  // Import 语句不会并行加载
  "scss.lint.importStatement": "ignore",

  // 因显示而忽略属性。例如，使用 "display: inline"时，宽度、高度、上边距、下边距和 float 属性将不起作用
  "scss.lint.propertyIgnoredDueToDisplay": "warning",

  // 通配选择符 (*) 运行效率低
  "scss.lint.universalSelector": "ignore",

  // 未知的属性。
  "scss.lint.unknownProperties": "warning",

  // 未知的供应商特定属性。
  "scss.lint.unknownVendorSpecificProperties": "ignore",

  // 使用厂商特定的前缀时，同时添加标准属性。
  "scss.lint.vendorPrefix": "warning",

  // 零不需要单位
  "scss.lint.zeroUnits": "ignore",

  // 启用或禁用所有验证
  "scss.validate": true

}
,
{


  // 自动检查扩展更新。如果扩展存在更新且禁用了自动更新扩展功能，其在扩展视图中将显示为过时扩展。
  "extensions.autoCheckUpdates": true,

  // 自动更新扩展。
  "extensions.autoUpdate": true,

  // 启用后，将在离开“扩展”视图时，自动关闭扩展详细信息页面。
  "extensions.closeExtensionDetailsOnViewChange": false,

  // 启用后，将不会显示扩展建议的通知。
  "extensions.ignoreRecommendations": false,

  // 启用后，除非用户特别进行请求，将不会获取或显示推荐。
  "extensions.showRecommendationsOnlyOnDemand": false

}
,
{


  // 自定义要启动的终端类型。
  //  - integrated: 使用 VS Code 的集成终端。
  //  - external: 使用设定的外部终端。
  "terminal.explorerKind": "integrated",

  // 定义在 Linux 上运行的终端。
  "terminal.external.linuxExec": "xterm",

  // 定义在 macOS 上运行的终端应用程序。
  "terminal.external.osxExec": "Terminal.app",

  // 定义在 Windows 上运行的终端。
  "terminal.external.windowsExec": "C:\\Windows\\System32\\cmd.exe"

}
,
{


  // 一组命令 ID，其键绑定不发送到 shell 而始终由 Code 处理。这使得通常由 shell 使用的键绑定的使用效果与未将终端设为焦点时相同，例如按 Ctrl+P 启动 Quick Open。
  "terminal.integrated.commandsToSkipShell": [
    "editor.action.toggleTabFocusMode",
    "workbench.action.debug.continue",
    "workbench.action.debug.pause",
    "workbench.action.debug.restart",
    "workbench.action.debug.run",
    "workbench.action.debug.start",
    "workbench.action.debug.stepInto",
    "workbench.action.debug.stepOut",
    "workbench.action.debug.stepOver",
    "workbench.action.debug.stop",
    "workbench.action.firstEditorInGroup",
    "workbench.action.focusActiveEditorGroup",
    "workbench.action.focusEighthEditorGroup",
    "workbench.action.focusFifthEditorGroup",
    "workbench.action.focusFirstEditorGroup",
    "workbench.action.focusFourthEditorGroup",
    "workbench.action.focusLastEditorGroup",
    "workbench.action.focusSecondEditorGroup",
    "workbench.action.focusSeventhEditorGroup",
    "workbench.action.focusSixthEditorGroup",
    "workbench.action.focusThirdEditorGroup",
    "workbench.action.lastEditorInGroup",
    "workbench.action.navigateDown",
    "workbench.action.navigateLeft",
    "workbench.action.navigateRight",
    "workbench.action.navigateUp",
    "workbench.action.openNextRecentlyUsedEditorInGroup",
    "workbench.action.openPreviousRecentlyUsedEditorInGroup",
    "workbench.action.quickOpen",
    "workbench.action.quickOpenPreviousEditor",
    "workbench.action.quickOpenView",
    "workbench.action.showCommands",
    "workbench.action.tasks.build",
    "workbench.action.tasks.restartTask",
    "workbench.action.tasks.runTask",
    "workbench.action.tasks.showLog",
    "workbench.action.tasks.showTasks",
    "workbench.action.tasks.terminate",
    "workbench.action.tasks.test",
    "workbench.action.terminal.clear",
    "workbench.action.terminal.clearSelection",
    "workbench.action.terminal.copySelection",
    "workbench.action.terminal.deleteWordLeft",
    "workbench.action.terminal.deleteWordRight",
    "workbench.action.terminal.focus",
    "workbench.action.terminal.focusAtIndex1",
    "workbench.action.terminal.focusAtIndex2",
    "workbench.action.terminal.focusAtIndex3",
    "workbench.action.terminal.focusAtIndex4",
    "workbench.action.terminal.focusAtIndex5",
    "workbench.action.terminal.focusAtIndex6",
    "workbench.action.terminal.focusAtIndex7",
    "workbench.action.terminal.focusAtIndex8",
    "workbench.action.terminal.focusAtIndex9",
    "workbench.action.terminal.focusFindWidget",
    "workbench.action.terminal.focusNext",
    "workbench.action.terminal.focusNextPane",
    "workbench.action.terminal.focusPrevious",
    "workbench.action.terminal.focusPreviousPane",
    "workbench.action.terminal.hideFindWidget",
    "workbench.action.terminal.kill",
    "workbench.action.terminal.moveToLineEnd",
    "workbench.action.terminal.moveToLineStart",
    "workbench.action.terminal.new",
    "workbench.action.terminal.newInActiveWorkspace",
    "workbench.action.terminal.paste",
    "workbench.action.terminal.resizePaneDown",
    "workbench.action.terminal.resizePaneLeft",
    "workbench.action.terminal.resizePaneRight",
    "workbench.action.terminal.resizePaneUp",
    "workbench.action.terminal.runActiveFile",
    "workbench.action.terminal.runSelectedText",
    "workbench.action.terminal.scrollDown",
    "workbench.action.terminal.scrollDownPage",
    "workbench.action.terminal.scrollToBottom",
    "workbench.action.terminal.scrollToNextCommand",
    "workbench.action.terminal.scrollToPreviousCommand",
    "workbench.action.terminal.scrollToTop",
    "workbench.action.terminal.scrollUp",
    "workbench.action.terminal.scrollUpPage",
    "workbench.action.terminal.selectAll",
    "workbench.action.terminal.selectToNextCommand",
    "workbench.action.terminal.selectToNextLine",
    "workbench.action.terminal.selectToPreviousCommand",
    "workbench.action.terminal.selectToPreviousLine",
    "workbench.action.terminal.split",
    "workbench.action.terminal.splitInActiveWorkspace",
    "workbench.action.terminal.toggleTerminal",
    "workbench.action.togglePanel"
  ],

  // 在存在活动终端会话的情况下，是否在退出时进行确认。
  "terminal.integrated.confirmOnExit": false,

  // 控制是否将终端中选定的文本复制到剪贴板。
  "terminal.integrated.copyOnSelection": false,

  // 控制终端光标是否闪烁。
  "terminal.integrated.cursorBlinking": false,

  // 控制终端游标的样式。
  "terminal.integrated.cursorStyle": "block",

  // 将在其中启动终端的一个显式起始路径，它用作 shell 进程的当前工作目录(cwd)。当根目录为不方便的 cwd 时，此路径在工作区设置中可能十分有用。
  "terminal.integrated.cwd": "",

  // 控制终端中的粗体文本是否始终使用 ANSI 的“明亮”颜色样式。
  "terminal.integrated.drawBoldTextInBrightColors": true,

  // 控制是否启用终端响铃。
  "terminal.integrated.enableBell": false,

  // 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Linux 终端使用。设置为 `null` 可删除环境变量。
  "terminal.integrated.env.linux": {},

  // 要添加到 VS Code 进程中的带有环境变量的对象，其将被 macOS 终端使用。设置为 `null` 可删除环境变量。
  "terminal.integrated.env.osx": {},

  // 要添加到 VS Code 进程中的带有环境变量的对象，其将被 Windows 终端使用。设置为 `null` 可删除环境变量。
  "terminal.integrated.env.windows": {},

  // 控制是否在启动 VS Code 时自动恢复工作区的终端会话。这是一项实验性设置，可能会出现问题，将来可能有改动甚至被移除。
  "terminal.integrated.experimentalRestore": false,

  // 控制终端存储字形纹理的方式。默认值为 "static"，使用固定的纹理来绘制字符。当设置为 "dynamic" 时，将在需要字符时才将其绘制到纹理中，仅需要在字符第一次绘制时增加少量时间，就能够提升整体性能。最终 "dynamic" 会成为默认选项，此设置也会被删除。对此设置的更改仅适用于新的终端。
  "terminal.integrated.experimentalTextureCachingStrategy": "dynamic",

  // 控制终端的字体系列，默认为 `editor.fontFamily` 的值。
  "terminal.integrated.fontFamily": "",

  // 控制终端的字号(以像素为单位)。
  "terminal.integrated.fontSize": 14,

  // 终端中非粗体字使用的字重。
  "terminal.integrated.fontWeight": "normal",

  // 终端中粗体字使用的字重。
  "terminal.integrated.fontWeightBold": "bold",

  // 控制终端字符的间距。此项的值为整数，表示在字符间添加的额外像素数。
  "terminal.integrated.letterSpacing": 0,

  // 控制终端的行高，此数字乘上终端字号得到实际行高(以像素为单位)。
  "terminal.integrated.lineHeight": 1,

  // 在 macOS 中，控制是否在按住 Option 键并单击时进行强制选择。这将强制进行常规 (行) 选择并禁用列选择模式; 同时允许使用常规终端选择来进行复制与粘贴，例如，可在 tmux 启用了鼠标模式时适用。
  "terminal.integrated.macOptionClickForcesSelection": false,

  // 控制是否在 macOS 终端中，使用 Option 键作为 Meta 键。
  "terminal.integrated.macOptionIsMeta": false,

  // 控制终端的渲染方式。
  //  - auto: 让 VS Code 决定要使用的渲染器。
  //  - canvas: 使用标准 GPU/基于 canvas 的渲染器
  //  - dom: 使用基于 DOM 的备用渲染器。
  "terminal.integrated.rendererType": "auto",

  // 控制终端对右键单击的响应方式。
  //  - default: 显示上下文菜单。
  //  - copyPaste: 当有内容选中时进行复制，否则进行粘贴。
  //  - selectWord: 选择光标下的单词并显示上下文菜单。
  "terminal.integrated.rightClickBehavior": "copyPaste",

  // 控制终端保持在缓冲区的最大行数。
  "terminal.integrated.scrollback": 1000,

  // 控制是否在终端启动时设置区域设置变量，在 macOS 上默认设置为 `true`，在其他平台上为 `false`。
  "terminal.integrated.setLocaleVariables": false,

  // 终端在 Linux 上使用的 Shell 的路径。[阅读有关配置 Shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
  "terminal.integrated.shell.linux": "sh",

  // 终端在 macOS 上使用的 Shell 的路径。[阅读有关配置 Shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
  "terminal.integrated.shell.osx": "sh",

  // 终端在 Windows 上使用的 Shell 的路径。[阅读有关配置 Shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
  "terminal.integrated.shell.windows": "C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe",

  // 在 Linux 终端上使用的命令行参数。[阅读有关配置 Shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
  "terminal.integrated.shellArgs.linux": [],

  // 在 macOS 终端上使用的命令行参数。[阅读有关配置 Shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
  "terminal.integrated.shellArgs.osx": [
    "-l"
  ],

  // 在 Windows 终端上使用的命令行参数。[阅读有关配置 Shell 的详细信息](https://code.visualstudio.com/docs/editor/integrated-terminal#_configuration)。
  "terminal.integrated.shellArgs.windows": [],

  // 当退出代码非零时，控制是否显示“终端进程以某退出代码终止”的警告。
  "terminal.integrated.showExitAlert": true

}
,
{


  // 控制在打开文件时是否在问题视图中对其进行定位。
  "problems.autoReveal": true,

  // 显示关于文件与文件夹的错误与警告。
  "problems.decorations.enabled": true

}
,
{


  // 启用/禁用导航路径
  "breadcrumbs.enabled": false,

  // 控制导航路径视图中文件路径的可见性和显示方式。
  //  - on: 在导航路径视图中显示文件路径。
  //  - off: 不在导航路径视图中显示文件路径。
  //  - last: 在导航路径视图中仅显示文件路径的最后一个元素。
  "breadcrumbs.filePath": "on",

  // 控制导航路径视图中符号的可见性和显示方式。
  //  - on: 在“导航路径”视图中显示所有符号。
  //  - off: 不在导航路径视图中显示符号。
  //  - last: 在导航路径视图中仅显示当前符号。
  "breadcrumbs.symbolPath": "on"

}
,
{


  // 启用要发送给 Microsoft 的故障报表。
  // 此选项需重启才可生效。
  "telemetry.enableCrashReporter": true,

  // 启用要发送给 Microsoft 的使用情况数据和错误。
  "telemetry.enableTelemetry": true

}
,
{


  // 显示大纲元素的图标。
  "outline.icons": true,

  // 使用小标表示错误和警告。
  "outline.problems.badges": true,

  // 使用颜色表示错误和警告。
  "outline.problems.colors": true,

  // 在大纲元素上显示错误和警告。
  "outline.problems.enabled": true

}
,
{


  // 针对 [git-commit] 语言，配置替代编辑器设置。
  "[git-commit]":  {
    "editor.rulers": [
        72
    ]
  },

  // 针对 [go] 语言，配置替代编辑器设置。
  "[go]":  {
    "editor.insertSpaces": false
  },

  // 针对 [json] 语言，配置替代编辑器设置。
  "[json]":  {
    "editor.quickSuggestions": {
        "strings": true
    }
  },

  // 针对 [makefile] 语言，配置替代编辑器设置。
  "[makefile]":  {
    "editor.insertSpaces": false
  },

  // 针对 [markdown] 语言，配置替代编辑器设置。
  "[markdown]":  {
    "editor.wordWrap": "on",
    "editor.quickSuggestions": false
  },

  // 针对 [yaml] 语言，配置替代编辑器设置。
  "[yaml]":  {
    "editor.insertSpaces": true,
    "editor.tabSize": 2,
    "editor.autoIndent": false
  }

}
,
{


  // Uses the legacy module resolving.
  "eslint._legacyModuleResolve": false,

  // Always show the ESlint status bar item.
  "eslint.alwaysShowStatus": false,

  // Turns auto fix on save on or off.
  "eslint.autoFixOnSave": false,

  // Controls whether eslint is enabled for JavaScript files or not.
  "eslint.enable": true,

  // A path added to NODE_PATH when resolving the eslint module.
  "eslint.nodePath": null,

  // The eslint options object to provide args normally passed to eslint when executed from a command line (see http://eslint.org/docs/developer-guide/nodejs-api#cliengine).
  "eslint.options": {},

  // The package manager you use to install node modules.
  "eslint.packageManager": "npm",

  // Controls whether a task for linting the whole workspace will be available.
  "eslint.provideLintTask": false,

  // Run the linter on save (onSave) or on type (onType)
  "eslint.run": "onType",

  // The location of the node binary to run ESLint under.
  "eslint.runtime": null,

  // Traces the communication between VSCode and the eslint linter service.
  "eslint.trace.server": "off",

  // An array of language ids which should be validated by ESLint
  "eslint.validate": [
    "javascript",
    "javascriptreact"
  ],

  // 
  "eslint.workingDirectories": []

}
,
{


  // 当 Node.js 从集成终端以调试模式启动时自动附加 Node 调试器
  //  - disabled: 自动附加被禁用，且不在状态栏中显示。
  //  - on: 自动附加已启用。
  //  - off: 自动附加未启用。
  "debug.node.autoAttach": "disabled"

}
,
{


  // Always show rule failures as warnings, independent of the tslint configuration.
  "tslint.alwaysShowRuleFailuresAsWarnings": false,

  // Always show the TSlint status bar item, not only when there are errors or warnings.
  "tslint.alwaysShowStatus": false,

  // Turns auto fix on save on or off, or defines which rules (e.g. `no-var-keyword`) to auto fix on save.
  "tslint.autoFixOnSave": false,

  // The path to the rules configuration file
  "tslint.configFile": "",

  // Control whether tslint is enabled for TypeScript files or not.
  "tslint.enable": true,

  // Configure glob patterns of file paths to exclude from linting
  "tslint.exclude": "",

  // Control if TypeScript definition files should be ignored
  "tslint.ignoreDefinitionFiles": true,

  // Control whether tslint is enabled for JavaScript files or not.
  "tslint.jsEnable": false,

  // A path added to NODE_PATH when resolving the tslint module.
  "tslint.nodePath": "",

  // The package manager to use to locate the tslint module.
  "tslint.packageManager": "npm",

  // An additional rules directory
  "tslint.rulesDirectory": "",

  // Run the linter on save (onSave) or on type (onType)
  "tslint.run": "onType",

  // Traces the communication between VSCode and the tslint linter service.
  "tslint.trace.server": "off",

  // Validate a file when there is only a default tslint configuration is found
  "tslint.validateWithDefaultConfig": false

}
,
{


  // 控制是否自动检测 Jake 任务。默认开启。
  "jake.autoDetect": "on"

}
,
{


  // Set the languages that the extension will be activated.  e.g. ["html","xml","php"] By default, it is ["*"] and will be activated for all languages.
  "auto-rename-tag.activationOnLanguage": [
    "*"
  ]

}
,
{


  // 控制是否自动检测 Grunt 任务。默认开启。
  "grunt.autoDetect": "on"

}
,
{


  // 控制是否自动检测 npm 脚本。
  "npm.autoDetect": "on",

  // 在资源管理器中启用“npm 脚本”视图。
  "npm.enableScriptExplorer": false,

  // 配置应从自动脚本检测中排除的文件夹的 glob 模式。
  "npm.exclude": "",

  // 从 https://registry.npmjs/org 和 https://registry.bower.io 获取数据，并在 npm 依赖中提供自动完成和悬停信息功能。
  "npm.fetchOnlinePackageInfo": true,

  // 用于运行脚本的程序包管理器。
  "npm.packageManager": "npm",

  // 使用 "--silent" 选项运行 npm 命令。
  "npm.runSilent": false,

  // 在脚本资源管理器中点击时进行的默认操作: "open" (打开) 或 "run" (运行)。默认值为 "open"。
  "npm.scriptExplorerAction": "open"

}
,
{


  // True if the imports should be absolute to the workspace root
  "autoimport.absolute": false,

  // Adds found items to intellisense and automatically imports then
  "autoimport.autoComplete": true,

  // Specifies wether to use double quotes
  "autoimport.doubleQuotes": false,

  // Glob for files to watch and scan, e.g ./src/** ./src/app/**/*.ts. Defaults to **/*.{ts,tsx}
  "autoimport.filesToScan": "**/*.{ts,tsx}",

  // This allows the importer to find your components name bypass the higher order components that you wrap it in. Each higher order component must be deliminated by pipe |. example: connect|withRouter
  "autoimport.higherOrderComponents": "connect|withRouter",

  // Specifies whether to use a semicolon at the end of the line
  "autoimport.semicolon": true,

  // Specifies wether to show notifications from Auto Import
  "autoimport.showNotifications": false,

  // Change this if your absolute urls are not absolute from workspace root e.g ./src
  "autoimport.sourceRoot": "./",

  // Specifies wether to use spaces between first and last brace
  "autoimport.spaceBetweenBraces": true,

  // Use ; at the end of a line e.g Import * from ./app or Import * from ./app; - Default True
  "autoimport.useSemiColon": true

}
,
{


  // 在创建时询问 gist 的名称. 能够帮助你识别多个 gist.
  "sync.askGistName": false,

  // 设置为 true 在编辑器打开时自动下载远程配置. [需要重启]
  "sync.autoDownload": false,

  // 设置为 true 在编辑器打开时自动上传本地配置. [需要重启]
  "sync.autoUpload": false,

  // 设置为 true 将会下载远程配置, 即便本地已有更新的配置.
  "sync.forceDownload": false,

  // 设置同步使用的 GitHub GIST ID
  "sync.gist": "",

  // 如果设置为 true, 开启静默模式. 上传和下载的概要信息显示在状态栏而非输出面板
  "sync.quietSync": false,

  // 设置为 false 如果你不想在下载时移除扩展.
  "sync.removeExtensions": true,

  // 设置为 false 如果你不想上传/下载扩展.
  "sync.syncExtensions": true

}
,
{


  // 选择一个图标包。
  //  - angular: Angular的图标。
  //  - angular_ngrx: Angular和ngrx的图标。
  //  - react: React的图标。
  //  - react_redux: React和Redux的图标。
  //  - vue: Vue的图标。
  //  - vue_vuex: Vue和Vuex的图标。
  //  - nest: NestJS的图标。
  //  - none: 没有启用图标包。
  "material-icon-theme.activeIconPack": "angular",

  // 设置自定义文件图标关联。
  "material-icon-theme.files.associations": {},

  // 设置自定义文件夹图标关联。
  "material-icon-theme.folders.associations": {},

  // 更改文件夹图标的颜色。
  "material-icon-theme.folders.color": "#90a4ae",

  // 设置文件夹图标的类型。
  //  - specific: 选择特定文件夹图标。
  //  - classic: 选择经典文件夹图标。
  //  - none: 没有文件夹图标。
  "material-icon-theme.folders.theme": "specific",

  // 隐藏该文件夹旁边的箭头。
  "material-icon-theme.hidesExplorerArrows": false,

  // 定义自定义语言映射的图标。
  "material-icon-theme.languages.associations": {},

  // 更改图标的透明度。
  "material-icon-theme.opacity": 1,

  // Change the saturation of the icons.
  "material-icon-theme.saturation": 1,

  // 显示重启消息。
  "material-icon-theme.showReloadMessage": true,

  // 更新后显示升级信息。
  "material-icon-theme.showUpdateMessage": false,

  // 首次安装后显示欢迎信息。
  "material-icon-theme.showWelcomeMessage": true

}
,
{


  // 不应展开 Emmet 缩写的语言数组。
  "emmet.excludeLanguages": [
    "markdown"
  ],

  // 指向包含 Emmet 配置文件与代码片段的文件夹路径。
  "emmet.extensionsPath": null,

  // 在默认不支持 Emmet 的语言中启用 Emmet 缩写功能。在此添加该语言与受支持的语言间的映射。
  // 示例: `{"vue-html": "html", "javascript": "javascriptreact"}`
  "emmet.includeLanguages": {},

  // 当设置为 `false` 时，将分析整个文件并确定当前位置能否展开 Emmet 缩写。当设置为 `true` 时，将仅在 CSS/SCSS/LESS 文件中分析当前位置周围的内容。
  "emmet.optimizeStylesheetParsing": true,

  // 用于修改 Emmet 某些操作和解析程序的行为的首选项。
  "emmet.preferences": {},

  // 将可能的 Emmet 缩写作为建议进行显示。当在样式表中或 emmet.showExpandedAbbreviation 设置为 `"never"` 时不适用。
  "emmet.showAbbreviationSuggestions": true,

  // 将展开的 Emmet 缩写作为建议进行显示。
  // 若选择 `"inMarkupAndStylesheetFilesOnly"`，将在 html、haml、jade、slim、xml、xsl、css、scss、sass、less 和 stylus 文件中生效。
  // 若选择 `"always"`，将在所有适用文件 (不仅仅是标记或 CSS 文件) 的所有部分生效。
  "emmet.showExpandedAbbreviation": "always",

  // 若为 `true`，Emmet 建议将显示为代码片段。可以在`editor.snippetSuggestions` 设置中排列其顺序。
  "emmet.showSuggestionsAsSnippets": false,

  // 为指定的语法定义配置文件或使用带有特定规则的配置文件。
  "emmet.syntaxProfiles": {},

  // 启用后，按下 TAB 键，将展开 Emmet 缩写。
  "emmet.triggerExpansionOnTab": false,

  // 用于 Emmet 代码片段的变量
  "emmet.variables": {}

}
,
{


  // 为编辑器中的合并冲突区域创建 CodeLens。
  "merge-conflict.codeLens.enabled": true,

  // 为编辑器中的合并冲突区域创建提示小标。
  "merge-conflict.decorators.enabled": true

}
,
{


  // 控制是否自动检测 Gulp 任务。默认开启。
  "gulp.autoDetect": "on"

}
,
{


  // 控制所有提交的 signoff 标志
  "git.alwaysSignOff": false,

  // 是否启用自动拉取
  "git.autofetch": false,

  // 是否启用自动刷新
  "git.autorefresh": true,

  // 配置何时自动检测存储库。
  "git.autoRepositoryDetection": true,

  // 控制在运行“推送到...”功能时列出的分支类型。
  //  - all: 显示所有引用。
  //  - local: 仅显示本地分支。
  //  - tags: 仅显示标签。
  //  - remote: 仅显示远程分支。
  "git.checkoutType": "all",

  // 同步 Git 存储库前请先进行确认。
  "git.confirmSync": true,

  // 控制 Git 徽章计数器。
  //  - all: 对所有更改计数。
  //  - tracked: 仅对跟踪的更改计数。
  //  - off: 关闭计数器。
  "git.countBadge": "all",

  // 控制 Git 是否在资源管理器和“打开的编辑器”视图中添加颜色和小标。
  "git.decorations.enabled": true,

  // 克隆 Git 存储库的默认位置。
  "git.defaultCloneDirectory": null,

  // 控制是否自动检测 Git 子模块。
  "git.detectSubmodules": true,

  // 控制可检测到的 Git 子模块的限制。
  "git.detectSubmodulesLimit": 10,

  // 启用使用 GPG 签名的提交
  "git.enableCommitSigning": false,

  // 是否启用 Git。
  "git.enabled": true,

  // 在没有暂存的更改时提交所有更改。
  "git.enableSmartCommit": false,

  // 要忽略的 Git 存储库列表
  "git.ignoredRepositories": [],

  // 忽略“旧版 Git”警告。
  "git.ignoreLegacyWarning": false,

  // 忽略“存储库中存在大量更改”的警告
  "git.ignoreLimitWarning": false,

  // 忽略“缺失 Git”警告
  "git.ignoreMissingGitWarning": false,

  // 控制何时显示提交消息输入验证。
  "git.inputValidation": "warn",

  // Git 可执行文件的路径。
  "git.path": null,

  // 控制 Git 是否在提交之前检查未保存的文件。
  "git.promptToSaveFilesBeforeCommit": false,

  // 控制是否在 Git 更改视图中显示内联“打开文件”操作。
  "git.showInlineOpenFileAction": true,

  // 控制在推送成功时是否显示通知。
  "git.showPushSuccessNotification": false

}
